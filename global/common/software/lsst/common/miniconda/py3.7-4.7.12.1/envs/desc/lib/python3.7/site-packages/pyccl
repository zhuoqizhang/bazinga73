{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CCL version you are using: 2.0.1\n"
     ]
    }
   ],
   "source": [
    "import pylab as plt\n",
    "import pyccl as ccl\n",
    "import scipy\n",
    "from scipy.interpolate import interp1d\n",
    "import numpy as np\n",
    "import matplotlib\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "print(\"CCL version you are using:\",ccl.__version__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Redshift distribution\n",
    "zmean1=1.0; zmean2=1.5;\n",
    "sigz1=0.15; sigz2=0.15;\n",
    "nzs=512;\n",
    "\n",
    "#Analytic redshift distributions\n",
    "z_a_1=np.linspace(zmean1-5*sigz1,zmean1+5*sigz1,nzs);\n",
    "z_a_2=np.linspace(zmean2-5*sigz2,zmean2+5*sigz2,nzs);\n",
    "pz_a_1=np.exp(-0.5*((z_a_1-zmean1)/sigz1)**2)\n",
    "pz_a_2=np.exp(-0.5*((z_a_2-zmean2)/sigz2)**2)\n",
    "#Bias parameters for these distributions\n",
    "bz_a_1=np.ones_like(z_a_1); bz_a_2=np.ones_like(z_a_2);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "cosmo_ccl1 = ccl.Cosmology(\n",
    "    Omega_c=0.25, Omega_b=0.05, h=0.7, A_s=2.1e-9, n_s=0.96, Neff=0, Omega_g=0)\n",
    "\n",
    "cosmo_ccl2 = ccl.Cosmology(\n",
    "    Omega_c=0.25, Omega_b=0.05, h=0.7, A_s=2.1e-9, n_s=0.96, w0=-0.9, Neff=0, Omega_g=0)\n",
    "\n",
    "cosmo_ccl3 = ccl.Cosmology(\n",
    "    Omega_c=0.25, Omega_b=0.05, h=0.7, A_s = 2.1e-9, n_s=0.96, w0=-0.9, wa=0.1, Neff=0, Omega_g=0)\n",
    "\n",
    "cosmo_ccl4 = ccl.Cosmology(\n",
    "    Omega_c=0.25, Omega_b=0.05, Omega_k=0.05, h=0.7, A_s = 2.1e-9, n_s=0.96, \n",
    "    w0=-0.9, wa=0.1, Neff=0, Omega_g=0)\n",
    "\n",
    "cosmo_ccl5 = ccl.Cosmology(\n",
    "    Omega_c=0.25, Omega_b=0.05, Omega_k=-0.05, h=0.7, A_s = 2.1e-9, n_s=0.96, \n",
    "    w0=-0.9, wa=0.1, Neff=0, Omega_g=0)\n",
    "\n",
    "cosmo_ccl6 = ccl.Cosmology(\n",
    "    Omega_c=0.3, Omega_b=0.0, h=0.7, sigma8 = 0.8, n_s=0.96, Neff=0,\n",
    "    transfer_function='bbks', matter_power_spectrum='linear', Omega_g=0)\n",
    "\n",
    "cosmo_ccl7 = ccl.Cosmology(\n",
    "    Omega_c=0.3, Omega_b=0.0, h=0.7, sigma8 = 0.8, n_s=0.96, Neff=0,\n",
    "    transfer_function='bbks', matter_power_spectrum='linear')\n",
    "\n",
    "cosmo_list = [\n",
    "    cosmo_ccl1,\n",
    "    cosmo_ccl2,\n",
    "    cosmo_ccl3,\n",
    "    cosmo_ccl4,\n",
    "    cosmo_ccl5,\n",
    "    cosmo_ccl6,\n",
    "    cosmo_ccl7]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "ccl_dir = '/global/homes/c/chihway/CCL/'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "accuracy = 1e-3\n",
    "\n",
    "#Redshift distribution\n",
    "zmean1=1.0; zmean2=1.5;\n",
    "sigz1=0.15; sigz2=0.15;\n",
    "nzs=512;\n",
    "\n",
    "#Analytic redshift distributions\n",
    "z_a_1=np.linspace(zmean1-5*sigz1,zmean1+5*sigz1,nzs);\n",
    "z_a_2=np.linspace(zmean2-5*sigz2,zmean2+5*sigz2,nzs);\n",
    "pz_a_1=np.exp(-0.5*((z_a_1-zmean1)/sigz1)**2)\n",
    "pz_a_2=np.exp(-0.5*((z_a_2-zmean2)/sigz2)**2)\n",
    "#Bias parameters for these distributions\n",
    "bz_a_1=np.ones_like(z_a_1); bz_a_2=np.ones_like(z_a_2);\n",
    "\n",
    "#Binned redshift distributions and biases\n",
    "z_h_1,pz_h_1=np.loadtxt(ccl_dir+\"benchmarks/data/bin1_histo.txt\",unpack=True)[:,1:]\n",
    "z_h_2,pz_h_2=np.loadtxt(ccl_dir+\"benchmarks/data/bin2_histo.txt\",unpack=True)[:,1:]\n",
    "bz_h_1=np.ones_like(z_h_1); bz_h_2=np.ones_like(z_h_2);\n",
    "\n",
    "#Intrinsic Alignment amplitude arrays\n",
    "zi_h_1,az_h_1=np.loadtxt(ccl_dir+\"benchmarks/data/ia_amp_histo_1.txt\",unpack=True)\n",
    "zi_h_2,az_h_2=np.loadtxt(ccl_dir+\"benchmarks/data/ia_amp_histo_2.txt\",unpack=True)\n",
    "zi_a_1,az_a_1=np.loadtxt(ccl_dir+\"benchmarks/data/ia_amp_analytic_1.txt\",unpack=True)\n",
    "zi_a_2,az_a_2=np.loadtxt(ccl_dir+\"benchmarks/data/ia_amp_analytic_2.txt\",unpack=True)\n",
    "\n",
    "rz_a_1=np.ones_like(z_a_1); rz_a_2=np.ones_like(z_a_2);\n",
    "rz_h_1=np.ones_like(z_h_1); rz_h_2=np.ones_like(z_h_2);\n",
    "\n",
    "#Initialize tracers\n",
    "cosmo_cls=ccl.Cosmology(Omega_c=0.30, Omega_b=0.00, Omega_g=0, Omega_k=0,\n",
    "                          h=0.7, sigma8=0.8, n_s=0.96, Neff=0, m_nu=0.0,\n",
    "                          w0=-1, wa=0, T_CMB=2.7, transfer_function='bbks',\n",
    "                          mass_function='tinker',\n",
    "                          matter_power_spectrum='linear')\n",
    "cosmo_cls.cosmo.gsl_params.INTEGRATION_LIMBER_EPSREL = 1E-4\n",
    "cosmo_cls.cosmo.gsl_params.INTEGRATION_EPSREL = 1E-4\n",
    "cosmo_cls_cmbl=cosmo_list[-1]\n",
    "\n",
    "\n",
    "# Renormalize the IA amplitude to be consistent with A_IA\n",
    "rho_m = ccl.physical_constants.RHO_CRITICAL * cosmo_cls['Omega_m']\n",
    "D1 = ccl.growth_factor(cosmo_cls, 1./(1+zi_a_1))\n",
    "D2 = ccl.growth_factor(cosmo_cls, 1./(1+zi_a_2))\n",
    "az_a_1 = - az_a_1 * D1 / (5e-14 * rho_m)\n",
    "az_a_2 = - az_a_2 * D2 / (5e-14 * rho_m)\n",
    "D1 = ccl.growth_factor(cosmo_cls, 1./(1+zi_h_1))\n",
    "D2 = ccl.growth_factor(cosmo_cls, 1./(1+zi_h_2))\n",
    "az_h_1 = - az_h_1 * D1 / (5e-14 * rho_m)\n",
    "az_h_2 = - az_h_2 * D2 / (5e-14 * rho_m)\n",
    "\n",
    "\n",
    "zarrs={'analytic':{'b1':{'z':z_a_1,'nz':pz_a_1,'bz':bz_a_1,'az':az_a_1,'rz':rz_a_1},'b2':{'z':z_a_2,'nz':pz_a_2,'bz':bz_a_2,'az':az_a_2,'rz':rz_a_2}},\n",
    "      'histo':{'b1':{'z':z_h_1,'nz':pz_h_1,'bz':bz_h_1,'az':az_h_1,'rz':rz_h_1},'b2':{'z':z_h_2,'nz':pz_h_2,'bz':bz_h_2,'az':az_h_2,'rz':rz_h_2}}}\n",
    "\n",
    "\n",
    "trcrs={}\n",
    "for nztyp in ['analytic','histo'] :\n",
    "    trcrs[nztyp]={}\n",
    "    za=zarrs[nztyp]\n",
    "    trcrs[nztyp]['nc_1']=ccl.NumberCountsTracer(cosmo_cls,has_rsd=False,\n",
    "                                                dndz=(za['b1']['z'],za['b1']['nz']),\n",
    "                                                bias=(za['b1']['z'],za['b1']['bz']))\n",
    "    trcrs[nztyp]['nc_2']=ccl.NumberCountsTracer(cosmo_cls,has_rsd=False,\n",
    "                                                dndz=(za['b2']['z'],za['b2']['nz']),\n",
    "                                                bias=(za['b2']['z'],za['b2']['bz']))\n",
    "    trcrs[nztyp]['wl_1']=ccl.WeakLensingTracer(cosmo_cls,\n",
    "                                               dndz=(za['b1']['z'],za['b1']['nz']))\n",
    "    trcrs[nztyp]['wl_2']=ccl.WeakLensingTracer(cosmo_cls,\n",
    "                                               dndz=(za['b2']['z'],za['b2']['nz']))\n",
    "    trcrs[nztyp]['wli_1']=ccl.WeakLensingTracer(cosmo_cls,\n",
    "                                               dndz=(za['b1']['z'],za['b1']['nz']),\n",
    "                                                ia_bias=(za['b1']['z'],za['b1']['az']))\n",
    "    trcrs[nztyp]['wli_2']=ccl.WeakLensingTracer(cosmo_cls,\n",
    "                                               dndz=(za['b2']['z'],za['b2']['nz']), \n",
    "                                                ia_bias=(za['b2']['z'],za['b2']['az']))\n",
    "    trcrs[nztyp]['cmbl']=ccl.CMBLensingTracer(cosmo_cls,1100.)\n",
    "    trcrs[nztyp]['cmblb']=ccl.CMBLensingTracer(cosmo_cls_cmbl,1100.)"
   ]
  }
